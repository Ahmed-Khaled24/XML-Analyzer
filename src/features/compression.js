const fs = require('fs')
const {  huffmanNode} = require('../utilities/treeNode')
const {  binaryHuffmanTree} = require('../utilities/Tree')
const { log } = require('console')
const { encode, decode } = require('punycode')



//  function compressAndSave(root , filePath){
//     root = JSON.parse(root)
//     let file = [["id","name","posts(body,topic)","followers(id)"]]
//     for(let i=0 ; i<root.descendants.length ; i++){
//         let subFile = []
//         let userFieldsLength = root.descendants[i].descendants.length
//         for(let n=0 ; n<userFieldsLength ; n++){

//         let userField =root.descendants[i].descendants[n].name

//         if(userField ==="id") {
//             subFile.push(userField.value)
//         }

//         if(userField ==="name"){
//             subFile.push(root.descendants[i].descendants[n].value)
//         } 

//         if(userField ==="posts") {
//             let postArr =[]
//             let postsLength = root.descendants[i].descendants[n].descendants.length
//             for(let k=0 ; k< postsLength ; k++){
//                 let postBodyArr=[]
//                 let singlePostLength =root.descendants[i].descendants[n].descendants[k].descendants.length
//                 for(let h=0 ; h < singlePostLength; h++){
//                 let singlePostField =root.descendants[i].descendants[n].descendants[k].descendants[h]
//                 if(singlePostField.name === "body"){
//                     postBodyArr.push(root.descendants[i].descendants[n].descendants[k].descendants[h].value)
//                 }
//                 if(singlePostField.name === "topics"){
//                     let topncsPostSubArr = []
//                     let topicsLength =  root.descendants[i].descendants[n].descendants[k].descendants[h].descendants.length
//                     for(let j=0 ; j < topicsLength ; j++){
//                         let topic = root.descendants[i].descendants[n].descendants[k].descendants[h].descendants[j].value
//                         topncsPostSubArr.push(topic)
//                     }
//                     let wholePostArr = [postBodyArr , topncsPostSubArr]
//                     postArr.push(wholePostArr)
//                 }
//             }
//         }
//             subFile.push(postArr)
//         }

//         if(userField === "followers"){
//             let followersArr =[]
//             let followersLength =root.descendants[i].descendants[n].descendants.length
//             for(let k=0 ; k< followersLength; k++){
//                 let followerID = root.descendants[i].descendants[n].descendants[k].descendants[0].value
//                followersArr.push(followerID)
//             }
//             subFile.push(followersArr)
//         }

//     }
//     file.push(subFile)

//     }

//     content = JSON.stringify(file);
    
//     SaveFile(content ,filePath , 'compressed' )
//     return file
// }



// function decompressAndSave(file , filePath){
//     let lines= ['<users>']
//     for(let i=1 ; i< file.length ; i++ ){
//         lines.push('\t<user>')
//         // id value
//         let id = file[i][0]
//         lines.push(`\t\t<id>${id}</id>`)

    
//         // name value
//         let name = file[i][1]
//         lines.push(`\t\t<name>${name}</name>`)


//         lines.push('\t\t<posts>')
//         let postsLength = file[i][2].length
//         for(let k=0 ; k< postsLength  ; k++){
//             let postBody = file[i][2][k][0]
//             lines.push(`\t\t\t<post>`)
//             lines.push(`\t\t\t\t<body>`)
//             lines.push('\t\t\t\t\t'+postBody)
//             lines.push(`\t\t\t\t</body>`)

//             let topicsLength = file[i][2][k][1].length
//             lines.push(`\t\t\t\t<topics>`)
//             for(let j=0 ; j<topicsLength ; j++){
//                 lines.push(`\t\t\t\t\t<topic>`)
//                 let topic = file[i][2][k][1][j]
//                 lines.push('\t\t\t\t\t\t'+topic)
//                 lines.push(`\t\t\t\t\t</topic>`)
//             }
//             lines.push(`\t\t\t\t</topics>`)
//             lines.push(`\t\t\t</post>`)
//         }
//         lines.push('\t\t</posts>')

//         lines.push(`\t\t<followers>`)
//         let followersLength = file[i][3].length
//         for(let h=0 ; h<followersLength ; h++){
//             let followerID = file[i][3][h]
//             lines.push(`\t\t\t<follower>`)
//             lines.push(`\t\t\t\t<id>${followerID}</id>`)
//             lines.push(`\t\t\t</follower>`)

//         }
//         lines.push(`\t\t</followers>`)

//         lines.push(`\t</user>`)
        

//     }
//     lines.push(`</users>`)

//     SaveFile(lines, filePath , 'Decompressed')
//     return lines
// }

function compressAndSaveLZW(file){
    let dictionary = generateDic()
    let result = []
    let ASCII = Object.keys(dictionary).length - 1
    let i=0
    let lastChecked
    let string = ''
    let letter
    let test = [...file]
    while( i !== test.length){
        letter = test[i]
        string += letter
        if(dictionary[string] !== undefined ){
            lastChecked = string
        }else{
            ASCII++
            dictionary[string] = ASCII
            string =''
            result.push(dictionary[lastChecked])
            i--
        }
        i++
    }
    result.push(dictionary[lastChecked])

    return result
}
// console.log(compressAndSaveLZW('geekific'));
function decompressAndSaveLZW(file){
    let dictionary = generateDic()
    let result = []
    let ASCII = Object.keys(dictionary).length - 1

    let i=0
    let lastChecked
    let string = ''
    let letter
    while( i !== file.length){
        test =  file[i]
        letter = getDicKey(dictionary,file[i])
        if(letter === undefined){
            letter =  string[0]
        }
        string += letter
        if(dictionary[string] !== undefined ){
            lastChecked = string
        }else{
            ASCII++
            dictionary[string] = ASCII
            string =''
            result.push(lastChecked)
            i--
        }
        i++
    }
    result.push(lastChecked)

    return result.join('')
}
function getDicKey(dictionary , ASCII){
    return Object.keys(dictionary).find(key => dictionary[key] === ASCII)
}

function generateDic(){
    let dictionary = {}
    for( let ASCII = 0;ASCII<256 ; ASCII++){
        dictionary[String.fromCharCode(ASCII)] = ASCII
    }
    return dictionary
}

//console.log(decompressAndSaveLZW(compressAndSaveLZW('geekificAllTheWay for me tooooo')));


function convert2Binary(file){
    let binaryFile = ''
    for(let i=0 ; i< file.length ;i++){
        binaryFile += Number(file.charCodeAt(i)).toString(2).padStart(8,'0') 

    }
    return binaryFile
}

function getFreqTable(xmlFileMin){
    let freqTable= {}
    if(xmlFileMin.length ===1) xmlFileMin = xmlFileMin[0]

    for(let i=0 ; i< xmlFileMin.length ;i++){

            letter = xmlFileMin[i]
        
        if(freqTable[letter] === undefined){
            freqTable[letter] = 1
        }else{
            freqTable[letter]++

        }
    }
    return freqTable
}

function getNodeArr(freqTable){
    let result =[]
    for(const key in freqTable){
        let temp = new huffmanNode(key)
        temp.freq = freqTable[key]
        result.push(temp)
    }
    result.sort((a,b)=>{
        if(a.freq < b.freq) return -1
        else return 1
    })
    return result
}


function getKey(value , table){
    for(const key in table){
        if(table[key] == value )return key
    }
    return -1

}

function insertSort(objArr,node){
    let i=0 ,findSortedPlace=0
    while(i<objArr.length){
        if(node.freq < objArr[i].freq){
            findSortedPlace=1
            break
        }
        i++
    }
    if(findSortedPlace){
        return objArr.length
    }
    return i
}

function constructHuffmanTree(xmlFileMin){
    if(xmlFileMin.length ===1) xmlFileMin = xmlFileMin[0]
    let nodeArr = getNodeArr(getFreqTable(xmlFileMin))
    while(nodeArr.length !== 1){
        let temp = new huffmanNode('')
        temp.freq = nodeArr[0].freq + nodeArr[1].freq
        temp.descendants = [nodeArr[0],nodeArr[1]]
        nodeArr.shift()
        nodeArr.shift()
        let index = insertSort(nodeArr,temp);
        if(index ===0 ){
            nodeArr[0] = temp
        }else{
            nodeArr.splice(index,0,temp)
        }
    }
    let huffmanTree = new binaryHuffmanTree(nodeArr[0])
    return huffmanTree
}

function getFinalTable(huffmanTree){
   
      huffmanTree.getCodes(huffmanTree.root)
      return huffmanTree.codeTable
}
// let node1 = new huffmanNode('')
// let node2 = new huffmanNode('')
// let node3 = new huffmanNode('')
// let node9 = new huffmanNode('')
// let node4 = new huffmanNode('a')
// let node5 = new huffmanNode('b')
// let node6 = new huffmanNode('c')
// let node7 = new huffmanNode('d')
// let node8 = new huffmanNode('e')

// node1.descendants = [node2,node3]
// node2.descendants = [node4,node9]
// node3.descendants = [node7,node8]
// node9.descendants = [node5,node6]

// //console.log(node1);
// let testTree = new binaryHuffmanTree(node1)
// console.log(getFinalTable(testTree));
// let nodei1 = new huffmanNode('')
// let nodei2 = new huffmanNode('')
// let nodei3 = new huffmanNode('')
// let nodei9 = new huffmanNode('')
// let nodei4 = new huffmanNode('f')
// let nodei5 = new huffmanNode('g')
// let nodei6 = new huffmanNode('h')
// let nodei7 = new huffmanNode('j')
// let nodei8 = new huffmanNode('k')

// nodei1.descendants = [nodei2,nodei3]
// nodei2.descendants = [nodei4,nodei9]
// nodei3.descendants = [nodei7,nodei8]
// nodei9.descendants = [nodei5,nodei6]
// testTree = new binaryHuffmanTree(nodei1)

// console.log(getFinalTable(testTree));


// console.log(binaryHuffmanTree.codeTable);


// takes the string that comes off the minify function
function encodeH(xmlFileMin,referenceTable){
    let encodedFile=''
    for(let i=0;i<xmlFileMin.length;i++){
        encodedFile += referenceTable[xmlFileMin[i]]
    }
    return encodedFile
}

// function binary2Decimal(binary){
//     let decimal = 0;
//     let counter =0;
//     for(let i=binary.length - 1 ; i>=0 ;i--){
//         decimal += Number(binary[i])* Math.pow(2,counter)
//         counter++
//     }
//     return decimal.toString()
// }
function binary2Hex(binary){

    while(binary.length %4 !==0){
        binary = '0' + binary;
    }
    let hex ='';
    let counter =0
    let fourbits =''
    for(let i = 0; i<binary.length; i++ ){
         fourbits += binary[i]
         counter++;
         if(fourbits.length === 4){
            fourbits = parseInt(fourbits,2)
            fourbits = fourbits.toString(16)
            hex += fourbits
            counter=0
            fourbits=''
         }

    }
    return hex
}

function binary2Base32(binary){

    while(binary.length %5 !==0){
        binary = '0' + binary;
    }
    let base32 ='';
    let counter =0
    let fourbits =''
    for(let i = 0; i<binary.length; i++ ){
         fourbits += binary[i]
         counter++;
         if(fourbits.length === 5){
            fourbits = parseInt(fourbits,2)
            fourbits = fourbits.toString(32)
            base32 += fourbits
            counter=0
            fourbits=''
         }

    }
    return base32
}

function hex2Decimal(hex){
    let decimalArr =[]
    let decimal 
    let counter =0;
    let hexTemp =''
    for(let i=0 ; i<hex.length ; i++){
        counter++;
        hexTemp+=hex[i];
        if(counter === 13 || counter === hex.length){
            decimal = parseInt(hexTemp , 16)
            decimalArr.push(decimal)
            counter=0;
            hexTemp=''
        }
    }
    return decimalArr
}

function hexToString(hex) {
    // hex = hex.substring(2) // remove the '0x' part
    var string = ""
  
    while (hex.length % 4 != 0) { // we need it to be multiple of 4
      hex =  "0" + hex;
    }
  
    for (var i = 0; i < hex.length; i+= 4){
      string += String.fromCharCode(parseInt(hex.substring(i,i + 4), 16)) // get char from ascii code which goes from 0 to 65536
    }
  
    return string;
  }

  function binary2ASCII(binary){
    while(binary.length %16 !==0){
        binary = '0' + binary;
    }
    let base32 ='';
    let counter =0
    let fourbits =''
    for(let i = 0; i<binary.length; i++ ){
         fourbits += binary[i]
         counter++;
         if(fourbits.length === 16){
            fourbits = parseInt(fourbits,2)
            fourbits = String.fromCharCode(fourbits)
            base32 += fourbits
            counter=0
            fourbits=''
         }

    }
    return base32
  }
//   let best = parseInt('011000010110000101100001	',2);
//   console.log(best);
//   console.log( String.fromCharCode(best));
//   console.log(String.fromCharCode(best).charCodeAt(0));
function huffManCompress(xmlFileMin){

    if(xmlFileMin.length ===1) xmlFileMin = xmlFileMin[0]

    let huffmanTree = constructHuffmanTree(xmlFileMin)
    getFinalTable(huffmanTree)
    let referenceTable = huffmanTree.codeTable
    let encodedFile = encodeH(xmlFileMin,referenceTable)
    encodedFile = binary2ASCII(encodedFile)
    // encodedFile = binary2Hex(encodedFile)
    //encodedFile = hex2Decimal(encodedFile)
    //encodedFile=binary2Base32(encodedFile)
    encodedFile = encodedFile + '@js@' + JSON.stringify(referenceTable)

    return encodedFile
}

// let test
//console.log(Number(test));
// console.log(BigInt(test).toString().length);
// console.log(BigInt(test).toString(16).length);
// console.log(BigInt(test).toString(32).length);
// console.log(BigInt(test).toString(36).length);

// let buf = Buffer.from(test)
// console.log(buf.toString(16).length);
// console.log(test.toString(10).length);




function getDecodeTable(encodeTable){
    let decodeTable = {}
    for(const key in encodeTable){
        decodeTable[encodeTable[key]] = key
    }
    return decodeTable
}
function decodeH(encoding,referenceTable){
    let decodedFile =''
    let code =''
    for(let i=0 ; i<encoding.length ;i++){
        code += encoding[i]
        if(referenceTable[code] !== undefined){
            decodedFile += referenceTable[code]
            code =''
        }
    }
    return decodedFile
}

function hex2Binary(hex){
    let binary =''
    for(let i=0 ; i<hex.length ;i++){
        if(i!==0){
            binary += parseInt(hex[i],16).toString(2).padStart(4,'0')
        }else{
            binary += parseInt(hex[i],16).toString(2)
        }
    }
    let counter=0;
    while(binary[counter] =='0'){
        counter++
    }
    
    return binary.substring(counter);
}
//let test

// let test2 = "1010101111000"
// console.log(test2.substring(3));
// console.log(test.length % 4);

// if(test.length % 4 !==0){
//     let overhead = '0'.repeat(test.length % 4)
//     test = overhead + test;
// }
// console.log(test.length % 4);
// let hex = binary2Hex(test)
// let bin = hex2Binary(hex)
// console.log(bin.length %4);
//console.log(hex);

// console.log(test == bin);
// let test = 'A'
// let dec = parseInt(test,16)
// let bin = dec.toString(2)
// console.log(bin);
function ASCII2Binary(letters){
    let res=''
    for(let i=0 ; i<letters.length ;i++){
        if(i!=0){
            res+=letters[i].charCodeAt(0).toString(2).padStart(16,"0")
        }else{
            res+=letters[i].charCodeAt(0).toString(2)
        }
    }
    return res
}
// takes the string that comes off the huffman compress function
function huffManDecompress(compressedXmlFile){
    compressedXmlFile = compressedXmlFile.split("@js@")
    let encoding = ASCII2Binary(compressedXmlFile[0])

    let referenceTable = getDecodeTable(JSON.parse(compressedXmlFile[1]))
    let decodedFile =decodeH(encoding,referenceTable)

    return decodedFile
}






module.exports = {
    huffManCompress:huffManCompress,
    huffManDecompress:huffManDecompress
}


    